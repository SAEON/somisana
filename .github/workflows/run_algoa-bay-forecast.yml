name: Run Algoa Bay Forecast model

on:
  workflow_dispatch:
    inputs:
      run_date:
        description: Run date (default = today). yyyymmdd
        required: false
        default:
  schedule:
    - cron:  '0 21 * * *' # 2300 SAST

env:
  REGISTRY: ghcr.io
  COPERNICUS_USERNAME: ${{ secrets.COPERNICUS_USERNAME }}
  COPERNICUS_PASSWORD: ${{ secrets.COPERNICUS_PASSWORD }}

jobs:
  # Dynamically set the branch ref to the currently executing branch
  branch-ref:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.BRANCH_REF.outputs.value }}
    steps:
    - name: Set the BRANCH_REF
      id: BRANCH_REF
      run: echo "::set-output name=value::${GITHUB_REF##*/}"

  # Many of the env variables reference the current branch
  # Set the environment variables using the current branch reference
  # (which is set dynamically)
  envs:
    needs: [branch-ref]
    runs-on: ubuntu-latest
    env:
      RUN_DATE: ${{ inputs.run_date }}
    outputs:
      BRANCH_REF: ${{ needs.branch-ref.outputs.value }}
      CROCO_IMAGE: ${{ steps.ENVS.outputs.CROCO_IMAGE }}
      TOOLKIT_IMAGE: ${{ steps.ENVS.outputs.TOOLKIT_IMAGE }}
      MODEL_RUN_DATE: ${{ steps.ENVS.outputs.MODEL_RUN_DATE }}
      RESTART_FILE_DATE: ${{ steps.ENVS.outputs.RESTART_FILE_DATE }}
    steps:
      - name: Configure run date
        id: run_date
        run: |
          echo "::set-output name=value::${RUN_DATE:=$(date +'%Y%m%d')}"
      - name: Configure restart date
        id: restart_date
        run: |
          echo "::set-output name=value::$(date -d '${{ steps.run_date.outputs.value }} -1 days' +'%Y%m%d')"
      - name: Set envs
        id: ENVS
        run: |
          echo "::set-output name=CROCO_IMAGE::${{ github.repository }}_algoa_bay_forecast_croco_${{ needs.branch-ref.outputs.value }}"
          echo "::set-output name=TOOLKIT_IMAGE::${{ github.repository }}_toolkit_${{ needs.branch-ref.outputs.value }}"
          echo "::set-output name=MODEL_RUN_DATE::${{ steps.run_date.outputs.value }}"
          echo "::set-output name=RESTART_FILE_DATE::${{ steps.restart_date.outputs.value }}"

  # Compile CROCO model for the Algoa Bay forecast
  compile-croco:
    needs: [envs]
    runs-on: ubuntu-latest
    env:
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
      CROCO_IMAGE: ${{ needs.envs.outputs.CROCO_IMAGE }}
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.CROCO_IMAGE }}
          tags: |
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: models/algoa-bay-forecast
          file: models/algoa-bay-forecast/croco.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # The SOMISANA toolkit is a suite of scripts to facilitate
  # running SOMISANA models - for example the Algoa Bay Forecast.
  # In the context of a testing environment, where updates to these
  # scripts is part of the development workflow, the toolkit needs
  # to be compiled on every run
  python:
    needs: [envs]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    env:
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
      TOOLKIT_IMAGE: ${{ needs.envs.outputs.TOOLKIT_IMAGE }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.TOOLKIT_IMAGE }}
          tags: |
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: toolkit
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Create a tmp folder structure for mode run assets. The format is:
  ## YYYYMMDD/
  ##  - forcing-inputs/
  ##  - croco/
  ##     - forcing/
  ##     - forecast/
  ##     - scratch/
  workdir:
    needs: [envs]
    runs-on: github-runner.saeon.int
    outputs:
      WORKDIR: ${{ steps.WORKDIR.outputs.WORKDIR}}
      WORKDIR_YESTERDAY: ${{ steps.WORKDIR.outputs.WORKDIR_YESTERDAY }}
    env:
      dirname: ${{ needs.envs.outputs.MODEL_RUN_DATE }}
      dirname_yesterday: ${{ needs.envs.outputs.RESTART_FILE_DATE }}
      branch_ref: ${{ needs.envs.outputs.BRANCH_REF }}
    steps:
      - name: Create /tmp/somisana/algoa-bay-forecast/${{ env.branch_ref }}/${{ env.dirname }} directory structure
        run: >-
          rm -rf /tmp/somisana/algoa-bay-forecast/${{ env.branch_ref }}/${{ env.dirname }} \
          && mkdir \
            -p \
            /tmp/somisana/algoa-bay-forecast/${{ env.branch_ref }}/${{ env.dirname }}/{croco/{forcing,forecast,scratch},forcing-inputs} \
          && chown \
            -R \
            :runners \
            /tmp/somisana/algoa-bay-forecast/${{ env.branch_ref }}/${{ env.dirname }} \
          && chmod \
            -R \
            774 \
            /tmp/somisana/algoa-bay-forecast/${{ env.branch_ref }}/${{ env.dirname }}
      - name: Set WORKDIRs
        id: WORKDIR
        run: |
          echo "::set-output name=WORKDIR::/tmp/somisana/algoa-bay-forecast/${{ env.branch_ref }}/${{ env.dirname }}"
          echo "::set-output name=WORKDIR_YESTERDAY::/tmp/somisana/algoa-bay-forecast/${{ env.branch_ref }}/${{ env.dirname_yesterday }}"

  # Download environmental data used to constrain model boundaries.
  # This job is retried if it fails, since the failure can be due to upstream errors
  # These downloads are used to create forcing files that are fed as input to the CROCO model
  # => marine.copernicus.eu: This is ocean data that forms the boundary of our model run
  # => ncei.noaa.gov: This is weather data used to create sea-surface conditions for our model run
  boundary-data:
    needs: [python, workdir, envs]
    runs-on: github-runner.saeon.int
    env:
      WORKDIR: ${{ needs.workdir.outputs.WORKDIR }}
      MODEL_RUN_DATE: ${{ needs.envs.outputs.MODEL_RUN_DATE }}
    steps:
      - name: Source ~/.bashrc (for NVM - required for non-interactive shells). This is required for the retry
        run: |
          source ~/.bashrc
          nvm use 16.14.2
      - name: Download Algoa-bay forcing input
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 30 # Script is considered failed if this limit is reached
          retry_wait_seconds: 10 # Wait 10 minutes and try again
          max_attempts: 10
          retry_on: any
          warning_on_retry: true
          shell: bash
          continue_on_error: false
          on_retry_command: rm -f $WORKDIR/forcing-inputs/*
          command: >-
            docker run \
              --rm \
              -v $WORKDIR/:/tmp/somisana/current \
              -e COPERNICUS_USERNAME=${{ env.COPERNICUS_USERNAME }} \
              -e COPERNICUS_PASSWORD=${{ env.COPERNICUS_PASSWORD }} \
              ${{ needs.python.outputs.image }} \
                -d \
                  --workdir /tmp/somisana/current/forcing-inputs \
                  --matlab-env /tmp/somisana/current/.env \
                  --download-date ${{ env.MODEL_RUN_DATE }} \
                  --domain 22,31,-37,-31

  # CROCOTOOLS is a collection of MatLab scripts for converting environmental data (i.e. the boundary data downloaded previously)
  # into NetCDF files that can be used as input to the CROCO model. https://www.croco-ocean.org/documentation/crocotools-documentation/
  crocotools:
    needs: [boundary-data, workdir, envs]
    runs-on: github-runner.saeon.int
    env:
      WORKDIR: ${{ needs.workdir.outputs.WORKDIR }}
      MODEL_RUN_DATE: ${{ needs.envs.outputs.MODEL_RUN_DATE }}
      RESTART_FILE_DATE: ${{ needs.envs.outputs.RESTART_FILE_DATE }}
      RESTART_FILE_PATH: ${{ needs.workdir.outputs.WORKDIR_YESTERDAY }}/croco/scratch/rst.nc
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Copy yesterday's restart file (if it exists)
        run: cp ${{ env.RESTART_FILE_PATH }} ${{ env.WORKDIR }}/croco/forcing/rst_${{ env.RESTART_FILE_DATE }}.nc
        continue-on-error: true # Allow for the case where the restart file doesn't exist
      - name: Configure MatLab env restart file path
        run: echo "RESTART_FILE_PATH=/tmp/somisana/current/croco/forcing/rst_${{ env.RESTART_FILE_DATE }}.nc" >> ${{ env.WORKDIR }}/.env
      - name: Make forcing files
        run: >-
          docker run \
            --rm \
            --mac-address 02:42:ff:ff:ff:ff \
            -v /opt/licenses/matlab-r2022a/license.lic:/licenses/license.lic \
            -v $(pwd)/models/algoa-bay-forecast/crocotools:/crocotools/ \
            -v $(pwd)/models/algoa-bay-forecast/lib/grd.nc:/crocotools/croco/forcing/grd.nc \
            -v $WORKDIR:/tmp/somisana/current \
            -e MLM_LICENSE_FILE=/licenses/license.lic \
            ghcr.io/saeon/somisana_matlab:r2022a \
              -batch "run('/crocotools/run.m')"

  # Execute the CROCO model using the forcing files created previously
  # The CROCO model executable is compiled a part of a Docker build, and is baked into a docker image.
  # As such the CROCO model run must be in the context of a container instantiated from that Docker image
  croco:
    needs: [compile-croco, crocotools, envs, workdir]
    runs-on: github-runner.saeon.int
    env:
      WORKDIR: ${{ needs.workdir.outputs.WORKDIR }}
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
      RUN_DATE: ${{ needs.envs.outputs.MODEL_RUN_DATE }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Execute CROCO binary
        run: >-
          docker run \
            --rm \
            -v $WORKDIR:/algoa-bay-forecast/current \
            -v $(pwd)/models/algoa-bay-forecast/lib/grd.nc:/algoa-bay-forecast/current/croco/forcing/grd.nc \
            --cpus 10 \
            ${{ needs.compile-croco.outputs.image }} \
              ./run_croco.bash \
                /algoa-bay-forecast/current \
                ${{ needs.envs.outputs.MODEL_RUN_DATE }} \
                ${{ needs.envs.outputs.RESTART_FILE_DATE }}
      - name: Move CROCO output
        run: mv ${{ env.WORKDIR }}/croco/scratch/avg.nc ${{ env.WORKDIR }}/croco/forecast/hourly-avg-${{ env.RUN_DATE }}.nc

  # The CROCO model outputs NetCDF data that represents ocean conditions of an
  # area mapped to a grid. The post-processing step:
  # (1) Normalizes the model output to be CF-standards compliant (climate-forecast NetCDF standards)
  # (2) Registers the model output as an out-db raster in PostGIS
  # (3) Triggers PostGIS SQL-processes to load vectors into the GeoServer layer table
  #
  # Some repository secrets are named according to the branch this action
  # is executed from. In this case names of branch-specific secrets need
  # to be computer first, as is done here
  post-processing:
    needs: [branch-ref, croco, python, envs, workdir]
    runs-on: github-runner.saeon.int
    env:
      WORKDIR: ${{ needs.workdir.outputs.WORKDIR }}
      RUN_DATE: ${{ needs.envs.outputs.MODEL_RUN_DATE }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Get PG_HOST secret name
        id: _PG_HOST_
        uses: ASzc/change-string-case-action@v2
        with:
          string: PG_HOST_${{ needs.branch-ref.outputs.value }}
      - name: Get PG_PORT secret name
        id: _PG_PORT_
        uses: ASzc/change-string-case-action@v2
        with:
          string: PG_PORT_${{ needs.branch-ref.outputs.value }}
      - name: Get PG_DB secret name
        id: _PG_DB_
        uses: ASzc/change-string-case-action@v2
        with:
          string: PG_DB_${{ needs.branch-ref.outputs.value }}
      - name: Get PG_USERNAME secret name
        id: _PG_USERNAME_
        uses: ASzc/change-string-case-action@v2
        with:
          string: PG_USERNAME_${{ needs.branch-ref.outputs.value }}
      - name: Get PG_PASSWORD secret name
        id: _PG_PASSWORD_
        uses: ASzc/change-string-case-action@v2
        with:
          string: PG_PASSWORD_${{ needs.branch-ref.outputs.value }}
      - name: Normalize the model output
        run: >-
          docker run \
            --rm \
            -v $WORKDIR:/tmp/somisana/current \
            -v $(pwd)/models/algoa-bay-forecast/lib/grd.nc:/tmp/somisana/current/croco/forcing/grd.nc \
            ${{ needs.python.outputs.image }} \
              -t \
                --grid-input-path /tmp/somisana/current/croco/forcing/grd.nc \
                --nc-input-path /tmp/somisana/current/croco/forecast/hourly-avg-${{ env.RUN_DATE }}.nc \
                --nc-output-path /tmp/somisana/current/croco/forecast/algoa-bay-forecast-${{ env.RUN_DATE }}.nc \
                --zarr-output-path /tmp/somisana/current/croco/forecast/algoa-bay-forecast-${{ env.RUN_DATE }}.zarr
      - name: Load normalized NetCDF output to PostGIS
        env:
          PG_HOST: ${{ secrets[steps._PG_HOST_.outputs.uppercase] }}
          PG_PORT: ${{ secrets[steps._PG_PORT_.outputs.uppercase] }}
          PG_DB: ${{ secrets[steps._PG_DB_.outputs.uppercase] }}
          PG_USERNAME: ${{ secrets[steps._PG_USERNAME_.outputs.uppercase] }}
          PG_PASSWORD: ${{ secrets[steps._PG_PASSWORD_.outputs.uppercase] }}
        run: >-
          docker run \
            --rm \
            -v $WORKDIR:/tmp/somisana/current \
            -e PG_HOST=$PG_HOST \
            -e PG_PORT=$PG_PORT \
            -e PG_USERNAME=$PG_USERNAME \
            -e PG_PASSWORD=$PG_PASSWORD \
            -e PG_DB=$PG_DB \
            ${{ needs.python.outputs.image }} \
              -l \
                --model-data /tmp/somisana/current/croco/forecast/algoa-bay-forecast-${{ env.RUN_DATE }}.nc \
                --model-name algoa-bay-forecast \
                --run-date ${{ env.RUN_DATE }}