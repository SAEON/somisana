name: Deploy somisana.ac.za

on:
  workflow_dispatch:

env:
  BRANCH_REF: next
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}_web_stable
  SOMISANA_CONTACT_EMAIL: ${{ vars.SOMISANA_CONTACT_EMAIL}}
  HOSTNAME: https://somisana.ac.za

jobs:
  build:
    env:
      SHA: sha-${{ github.sha }}
    runs-on: saeon
    steps:
      - name: Get image name lowercase
        id: 'lowercase'
        run: |
          IMAGE_NAME_LOWER=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME_LOWER" >> $GITHUB_OUTPUT
      - name: Checkout source code
        uses: actions/checkout@main
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if image with sha tag already exists
        id: check-image
        run: |
          set -e
          SHA_IMAGE=$(docker images -q ${REGISTRY}/${{ steps.lowercase.outputs.image_name }}:${SHA} || true)
          if [ -z "$SHA_IMAGE" ]; then
            echo "image_exists=false" >> $GITHUB_OUTPUT
          else
            echo "image_exists=true" >> $GITHUB_OUTPUT
          fi
      - name: Extract metadata (tags, labels) for Docker
        if: steps.check-image.outputs.image_exists == 'false'
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name }}
          tags: |
            latest
            ${{ env.SHA }}
      - name: Build and push
        if: steps.check-image.outputs.image_exists == 'false'
        uses: docker/build-push-action@master
        with:
          context: web
          build-args: |
            TZ=utc
            NODE_ENV=production
            DEPLOYMENT_ENV=production
            REACT_APP_ESRI_API_KEY=${{ secrets.ESRI_API_KEY }}
            REACT_APP_HOSTNAME=${{ env.HOSTNAME }}
            REACT_APP_TECHNICAL_CONTACT=zd.smith@saeon.nrf.ac.za
            REACT_APP_TILESERV_BASE_URL=https://maps.somisana.ac.za
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [build]
    runs-on: saeon
    env:
      SHA: sha-${{ github.sha }}
    steps:
      - name: Check out source code (shared)
        uses: actions/checkout@main
        with:
          ref: ${{ env.BRANCH_REF }}

      - name: Get image name lowercase
        id: 'lowercase'
        run: |
          IMAGE_NAME_LOWER=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME_LOWER" >> $GITHUB_OUTPUT

      - name: (SCP) Copy stack configuration to app server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SWARM_HOSTNAME }}
          username: ${{ secrets.SWARM_USERNAME }}
          password: ${{ secrets.SWARM_PASSWORD }}
          port: ${{ secrets.SWARM_SSH_PORT }}
          source: deploy/web/next/stack.yml
          target: 'somisana'

      - name: (SSH) Deploy stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SWARM_HOSTNAME }}
          username: ${{ secrets.SWARM_USERNAME }}
          password: ${{ secrets.SWARM_PASSWORD }}
          port: ${{ secrets.SWARM_SSH_PORT }}
          script: |
            echo "DOCKER_IMAGE=${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name }}:${{ env.SHA }}" > /home/runner/somisana/deploy/web/next/stack.env
            echo "MONGO_HOST=${{ secrets.MONGO_HOST_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "MONGO_DB=${{ secrets.MONGO_DB_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "MONGO_USERNAME=${{ secrets.MONGO_USERNAME_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "ODP_SSO_CLIENT_SECRET=${{ secrets.ODP_SSO_CLIENT_SECRET }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "HOSTNAME=${{ env.HOSTNAME }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "PG_HOST=${{ secrets.PG_HOST_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "PG_PORT=${{ secrets.PG_PORT_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "PG_DB=${{ secrets.PG_DB_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "PG_USERNAME=${{ secrets.PG_USERNAME_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "PG_PASSWORD=${{ secrets.PG_PASSWORD_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            echo "PG_DATABASE_URL=postgres://${{ secrets.PG_USERNAME_NEXT }}:${{ secrets.PG_PASSWORD_NEXT }}@${{ secrets.PG_HOST_NEXT }}:${{ secrets.PG_PORT_NEXT }}/${{ secrets.PG_DB_NEXT }}" >> /home/runner/somisana/deploy/web/next/stack.env
            sudo /opt/deploy-docker-stack.sh /home/runner/somisana/deploy/web/next/stack.yml /home/runner/somisana/deploy/web/next/stack.env somisana_stable
