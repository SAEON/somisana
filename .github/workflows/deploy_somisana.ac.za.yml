name: Deploy somisana.ac.za

on:
  workflow_dispatch:

env:
  BRANCH_REF: stable
  ESRI_API_KEY: ${{ secrets.ESRI_API_KEY }} # Repository secret
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}_web_stable
  MONGO_DB: ${{ secrets.MONGO_DB_STABLE }} # Repository secret
  MONGO_HOST: ${{ secrets.MONGO_HOST_STABLE }} # Organization secret
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD_STABLE }} # Repository secret
  MONGO_USERNAME: ${{ secrets.MONGO_USERNAME_STABLE }} # Repository secret
  PG_DB: ${{ secrets.PG_DB_STABLE }} # Repository secret
  PG_HOST: ${{ secrets.PG_HOST_STABLE }} # Organization secret
  PG_PASSWORD: ${{ secrets.PG_PASSWORD_STABLE }} # Repository secret
  PG_PORT: ${{ secrets.PG_PORT_STABLE }} # Organization secret
  PG_USERNAME: ${{ secrets.PG_USERNAME_STABLE }} # Repository secret
  SWARM_HOSTNAME: ${{ secrets.SWARM_HOSTNAME }} # Organization secret
  SWARM_PASSWORD: ${{ secrets.SWARM_PASSWORD }} # Organization secret
  SWARM_SSH_PORT: ${{ secrets.SWARM_SSH_PORT }} # Organization secret
  SWARM_USERNAME: ${{ secrets.SWARM_USERNAME }} # Organization secret
  SOMISANA_CONTACT_EMAIL: ${{ vars.SOMISANA_CONTACT_EMAIL}}
  SHA: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@master
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.GITHUB_TOKEN }}
      - name: Check if image with sha tag already exists
        id: check-image
        run: |
          set -e
          SHA_IMAGE=$(docker images -q ${DOCKER_REGISTRY}/${IMAGE_NAME}:${SHA} || true)
          if [ -z "$SHA_IMAGE" ]; then
            echo "::set-output name=image_exists::false"
          else
            echo "::set-output name=image_exists::true"
          fi
      - name: Extract metadata (tags, labels) for Docker
        if: steps.check-image.outputs.image_exists == 'false'
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ env.SHA }}
      - name: Build and push
        if: steps.check-image.outputs.image_exists == 'false'
        uses: docker/build-push-action@master
        with:
          context: web
          build-args: |
            API=https://somisana.ac.za
            NODE_ENV=production
            DEPLOYMENT_ENV=production
            TZ=utc
            TECHNICAL_CONTACT=zd.smith@saeon.nrf.ac.za
            TILESERV_BASE_URL=https://maps.somisana.ac.za
            FEATURESERV_BASE_URL=https://features.somisana.ac.za
            ESRI_API_KEY=${{ env.ESRI_API_KEY }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [build]
    runs-on: saeon
    steps:
      - name: Check out source code (shared)
        uses: actions/checkout@master
        with:
          ref: ${{ env.BRANCH_REF }}

      - name: (SCP) Copy stack configuration to app server
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SWARM_HOSTNAME }}
          username: ${{ env.SWARM_USERNAME }}
          password: ${{ env.SWARM_PASSWORD }}
          port: ${{ env.SWARM_SSH_PORT }}
          source: deploy/web/stable/stack.yml
          target: 'somisana'

      - name: (SSH) Deploy stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SWARM_HOSTNAME }}
          username: ${{ env.SWARM_USERNAME }}
          password: ${{ env.SWARM_PASSWORD }}
          port: ${{ env.SWARM_SSH_PORT }}
          script: |
            echo "DOCKER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.SHA }}" > /home/runner/somisana/deploy/web/stable/stack.env
            echo "MONGO_HOST=${{ env.MONGO_HOST }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "MONGO_DB=${{ env.MONGO_DB }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "MONGO_USERNAME=${{ env.MONGO_USERNAME }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "MONGO_PASSWORD=${{ env.MONGO_PASSWORD }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "PG_HOST=${{ env.PG_HOST }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "PG_PORT=${{ env.PG_PORT }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "PG_DB=${{ env.PG_DB }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "PG_USERNAME=${{ env.PG_USERNAME }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "PG_PASSWORD=${{ env.PG_PASSWORD }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            echo "PG_DATABASE_URL=postgres://${{ env.PG_USERNAME }}:${{ env.PG_PASSWORD }}@${{ env.PG_HOST }}:${{ env.PG_PORT }}/${{ env.PG_DB }}" >> /home/runner/somisana/deploy/web/stable/stack.env
            sudo /opt/deploy-docker-stack.sh /home/runner/somisana/deploy/web/stable/stack.yml /home/runner/somisana/deploy/web/stable/stack.env somisana_stable
