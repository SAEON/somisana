name: Run Marine Heat Waves

on:
  workflow_dispatch:
    inputs:
      run_date:
        description: Run date (default = today). yyyymmdd
        required: false
        default:
  schedule:
    - cron: '0 02 * * *' # 0400 SAST

env:
  REGISTRY: ghcr.io

jobs:
  # Dynamically set the branch ref to the currently executing branch
  branch-ref:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.BRANCH_REF.outputs.value }}
    steps:
      - name: Set the BRANCH_REF
        id: BRANCH_REF
        run: echo "value=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

  # Many of the env variables reference the current branch
  # Set the environment variables using the current branch reference
  # (which is set dynamically)
  envs:
    needs: [branch-ref]
    runs-on: ubuntu-latest
    env:
      R1: ${{ inputs.run_date }}
      R2: ${{ inputs.run_date }}
      R3: ${{ inputs.run_date }}
    outputs:
      BRANCH_REF: ${{ needs.branch-ref.outputs.value }}
      TOOLKIT_IMAGE: ${{ steps.ENVS.outputs.TOOLKIT_IMAGE }}
      RUN_DATE: ${{ steps.ENVS.outputs.RUN_DATE }}
      RUN_DATE_YYYMM: ${{ steps.ENVS.outputs.RUN_DATE_YYYMM }}
      RUN_DATE_YYYY: ${{ steps.ENVS.outputs.RUN_DATE_YYYY }}
    steps:
      - name: Configure run date
        id: run_date
        run: |
          echo "yyyymmdd=${R1:=$(date +'%Y%m%d')}" >> $GITHUB_OUTPUT
          echo "yyyymm=${R2:=$(date +'%Y%m')}" >> $GITHUB_OUTPUT
          echo "yyyy=${R3:=$(date +'%Y')}" >> $GITHUB_OUTPUT
      - name: Set envs
        id: ENVS
        run: |
          echo "CROCO_IMAGE=${{ github.repository }}_algoa_bay_forecast_croco_${{ needs.branch-ref.outputs.value }}" >> $GITHUB_OUTPUT
          echo "TOOLKIT_IMAGE=${{ github.repository }}_toolkit_mhw_${{ needs.branch-ref.outputs.value }}" >> $GITHUB_OUTPUT
          echo "RUN_DATE=${{ steps.run_date.outputs.yyyymmdd }}" >> $GITHUB_OUTPUT
          echo "RUN_DATE_YYYMM=${{ steps.run_date.outputs.yyyymm }}" >> $GITHUB_OUTPUT
          echo "RUN_DATE_YYYY=${{ steps.run_date.outputs.yyyy }}" >> $GITHUB_OUTPUT

  toolkit:
    needs: [envs]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    env:
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
      TOOLKIT_IMAGE: ${{ needs.envs.outputs.TOOLKIT_IMAGE }}
    steps:
      - name: Check out source code
        uses: actions/checkout@master
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ env.TOOLKIT_IMAGE }}
          tags: |
            type=sha
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: toolkit
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Create a tmp folder structure for mode run assets. The format is:
  ## oisst/
  ## YYYYMMDD/
  workdir:
    needs: [envs]
    runs-on: somisana
    outputs:
      CACHDIR: ${{ steps.WORKDIR.outputs.CACHDIR}}
      WORKDIR: ${{ steps.WORKDIR.outputs.WORKDIR}}
    env:
      dirname: ${{ needs.envs.outputs.RUN_DATE }}
      branch_ref: ${{ needs.envs.outputs.BRANCH_REF }}
    steps:
      - name: Create /home/runner/somisana/marine-heat-waves/${{ env.branch_ref }}/${{ env.dirname }} directory structure
        run: |
          rm -rf /home/runner/somisana/marine-heat-waves/${{ env.branch_ref }}/${{ env.dirname }}
          mkdir -p /home/runner/somisana/marine-heat-waves/${{ env.branch_ref }}/{oisst,${{ env.dirname }}}
          chown -R :runners /home/runner/somisana/marine-heat-waves/${{ env.branch_ref }}/{oisst,${{ env.dirname }}}
          chmod -R 774 /home/runner/somisana/marine-heat-waves/${{ env.branch_ref }}/{oisst,${{ env.dirname }}}
      - name: Set directories
        id: WORKDIR
        run: |
          echo "CACHDIR=/home/runner/somisana/marine-heat-waves/${{ env.branch_ref }}/oisst" >> $GITHUB_OUTPUT
          echo "WORKDIR=/home/runner/somisana/marine-heat-waves/${{ env.branch_ref }}/${{ env.dirname }}" >> $GITHUB_OUTPUT

  calculate-thresholds:
    needs: [branch-ref, toolkit, envs, workdir]
    runs-on: croco
    env:
      WORKDIR: ${{ needs.workdir.outputs.WORKDIR }}
      CACHDIR: ${{ needs.workdir.outputs.CACHDIR }}
      RUN_DATE: ${{ needs.envs.outputs.RUN_DATE }}
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
    steps:
      - name: Check out source code
        uses: actions/checkout@master
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Update the OISST cache with new daily data
        run: >-
          docker run \
            --rm \
            -v $WORKDIR:/tmp/somisana/current \
            -v $CACHDIR:/tmp/somisana/cache \
            ${{ needs.toolkit.outputs.image }} \
              mhw \
                update-catalogue \
                  --domain="4,55,-40,-10" \
                  --chown=":runners" \
                  --oisst-cache /tmp/somisana/cache/
      - name: Run the detection script
        run: >-
          docker run \
            --rm \
            -v $WORKDIR:/tmp/somisana/current \
            -v $CACHDIR:/tmp/somisana/cache \
            ${{ needs.toolkit.outputs.image }} \
              mhw \
                detect \
                  --domain="4,55,-40,-10" \
                  --oisst-cache /tmp/somisana/cache/ \
                  --output /tmp/somisana/current/mhw-${{ env.RUN_DATE }}.nc

  # Upload the combined thresholds and Marine Heat Waves events data to Mnemosyne
  archive-output:
    needs: [calculate-thresholds, workdir, envs, toolkit]
    runs-on: somisana
    env:
      WORKDIR: ${{ needs.workdir.outputs.WORKDIR }}
      RUN_DATE: ${{ needs.envs.outputs.RUN_DATE }}
      RUN_DATE_YYYMM: ${{ needs.envs.outputs.RUN_DATE_YYYMM }}
    steps:
      - name: Load $PATH
        run: |
          source ~/.bashrc
      - name: Upload NetCDF output to mnemosyne HTTP-range server
        continue-on-error: false
        run: |
          curl \
            --silent \
            --keepalive-time 1200 \
            -X PUT \
            -H "Content-Type: application/octet-stream" \
            -H "Authorization: ${{ secrets.MNEMOSYNE_TOKEN }}" \
            -T ${{ env.WORKDIR}}/mhw-${{ env.RUN_DATE }}.nc \
            https://mnemosyne.somisana.ac.za/somisana/marine-heat-waves/${{ env.RUN_DATE_YYYMM }}/${{ env.RUN_DATE }}.nc;
      - name: Kerchunk the NetCDF file output
        continue-on-error: false
        run: |
          docker run \
            --rm \
            -v $WORKDIR:/tmp/somisana/current \
            ${{ needs.toolkit.outputs.image }} \
              kerchunk \
                run \
                  --inputs https://mnemosyne.somisana.ac.za/somisana/marine-heat-waves/${{ env.RUN_DATE_YYYMM }}/${{ env.RUN_DATE }}.nc \
                  --output /tmp/somisana/current/${{ env.RUN_DATE }}.kerchunk.json
      - name: Upload Kerchunk output to Mnemosyne
        continue-on-error: false
        run: |
          curl \
            --silent \
            --keepalive-time 1200 \
            -X PUT \
            -H "Authorization: ${{ secrets.MNEMOSYNE_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            -T ${{ env.WORKDIR}}/${{ env.RUN_DATE }}.kerchunk.json \
            https://mnemosyne.somisana.ac.za/somisana/marine-heat-waves/${{ env.RUN_DATE_YYYMM }}/${{ env.RUN_DATE }}.kerchunk.json;
