name: Run OpenDrift

on:
  workflow_dispatch:

# Many of the env variables reference the current branch,
# which is set dynamically in the branch-ref job below
# So the env variables are mostly set in the envs job below the branch-ref job
env:
  REGISTRY: ghcr.io

jobs:
  # Dynamically set the branch ref to the currently executing branch
  branch-ref:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.BRANCH_REF.outputs.value }}
    steps:
      - name: Set the BRANCH_REF
        id: BRANCH_REF
        run: |
          echo "value=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

  # Set the environment variables using the current branch reference
  envs:
    needs: [branch-ref]
    runs-on: ubuntu-latest
    outputs:
      BRANCH_REF: ${{ needs.branch-ref.outputs.value }}
      OPENDRIFT_IMAGE: ${{ steps.ENVS.outputs.OPENDRIFT_IMAGE }}
      CONFIG_NAME: ${{ steps.config_vars.outputs.CONFIG_NAME }}
      CROCO_RUN_DATE: ${{ steps.config_vars.outputs.CROCO_RUN_DATE }}
    steps:
      - name: Set envs
        id: ENVS
        run: |
          echo "OPENDRIFT_IMAGE=${{ github.repository }}_opendrift_${{ needs.branch-ref.outputs.value }}" >> $GITHUB_OUTPUT
      - name: Check out source code
        uses: actions/checkout@main
        with:
          ref: ${{ needs.branch-ref.outputs.value }}
      - name: get configuration name and run date from the python config file
        id: config_vars
        run: |
          # Use grep to find the line where the variable is defined
          config_name_line=$(grep -w config_name opendrift/oil/config_oil.py)
          croco_run_date_line=$(grep -w croco_run_date opendrift/oil/config_oil.py)
          # Use awk to extract the value of the variable from the line (thanks chatgpt)
          echo "CONFIG_NAME=$(echo "$config_name_line" | awk -F "=" '{print $2}' | sed -e 's/^[[:space:]]*//')" >> $GITHUB_OUTPUT
          echo "CROCO_RUN_DATE=$(echo "$croco_run_date_line" | awk -F "=" '{print $2}' | sed -e 's/^[[:space:]]*//')" >> $GITHUB_OUTPUT

  build-image:
    needs: [envs]
    runs-on: ubuntu-latest
    env:
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
      OPENDRIFT_IMAGE: ${{ needs.envs.outputs.OPENDRIFT_IMAGE }}
      SHA: sha-${{ github.sha }}
    outputs:
      image: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name }}
    steps:
      - name: Get image name lowercase
        id: 'lowercase'
        run: |
          IMAGE_NAME_LOWER=$(echo $OPENDRIFT_IMAGE | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME_LOWER" >> $GITHUB_OUTPUT
      - name: Check out source code
        uses: actions/checkout@main 
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if image with sha tag already exists
        id: check-image
        run: |
          set -e
          SHA_IMAGE=$(docker images -q ${REGISTRY}/${{ steps.lowercase.outputs.image_name }}:${SHA} || true)
          if [ -z "$SHA_IMAGE" ]; then
            echo "image_exists=false" >> $GITHUB_OUTPUT
          else
            echo "image_exists=true" >> $GITHUB_OUTPUT
          fi
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ env.OPENDRIFT_IMAGE }}
          tags: |
            latest
            ${{ env.SHA }}
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: opendrift
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  run-opendrift:
    needs: [build-image, envs]
    runs-on: somisana
    env:
      SHA: sha-${{ github.sha }}
    steps:
      - name: Clean /home/runner/somisana/opendrift/
        continue-on-error: true # Allow for the case where there are no folders in directory
        run: >-
          find \
            /home/runner/somisana/opendrift/* \
            -maxdepth 0 \
            -type d \
            -ctime +5 \
            -exec \
              rm \
                -rf {} \;
      - name: run the model
        run: >-
          docker run \
            --rm \
            -v /home/runner/somisana/:/tmp/ \
            --entrypoint /bin/bash \
            ${{ needs.build-image.outputs.image }}:${{ env.SHA }} \
            -c "python /somisana/oil/run_oil.py"

  # Archive output
  # WE NEED TO KERCHUNK THE NETCDF HERE
  # HERE WE NEED TO USE THE CONFIG NAME AND RUN DATE FROM ENVS TO CREATE THE DIRECTORY ON THE FILE SERVER
  archive-data:
    needs: [envs, run-opendrift]
    runs-on: somisana
    env:
      CONFIG_NAME: ${{ needs.envs.outputs.CONFIG_NAME }}
      CROCO_RUN_DATE: ${{ needs.envs.outputs.CROCO_RUN_DATE }}
    steps:
      - name: Load $PATH
        run: |
          source ~/.bashrc
      - name: Archive the open-drift output
        continue-on-error: false
        run: |
           curl \
            --silent \
            --keepalive-time 2400 \
            -X PUT \
            -H "Content-Type: application/octet-stream" \
            -H "Authorization: ${{ secrets.MNEMOSYNE_TOKEN }}" \
            -T /tmp/opendrift/${{ env.CROCO_RUN_DATE }}/${{ env.CONFIG_NAME }}/trajectories.nc \
            https://mnemosyne.somisana.ac.za/opendrift/${{ env.CROCO_RUN_DATE }}/${{ env.CONFIG_NAME }}/trajectories.nc

